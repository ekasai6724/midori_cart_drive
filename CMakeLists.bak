cmake_minimum_required(VERSION 3.5)
project(midori_cart_drive)

# Enable ROS build
add_definitions(-DROS)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(midori_cart_messages REQUIRED)
find_package(Qt5 COMPONENTS Core Widgets REQUIRED)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

include_directories(
	${rclcpp_INCLUDE_DIRS}
	${Qt5Core_INCLUDE_DIRS}
	${Qt5Quick_INCLUDE_DIRS}
)

# Build
file(GLOB SOURCE_FILES
    "src/*.cpp"
)
add_executable(
    ${PROJECT_NAME}
    ${SOURCE_FILES}
)
ament_target_dependencies(
    ${PROJECT_NAME}
    rclcpp
    geometry_msgs
    sensor_msgs
    midori_cart_messages
)
qt5_use_modules(
    ${PROJECT_NAME}
    Core
    SerialPort
)
target_link_libraries(
    ${PROJECT_NAME}
    Qt5::Core
    Qt5::Widgets
    Qt5::SerialPort
)

# Install 
install(
    TARGETS ${PROJECT_NAME}
    DESTINATION lib/${PROJECT_NAME}
)

# Install launch file
install(
    DIRECTORY launch
    DESTINATION share/${PROJECT_NAME}/
)

ament_package()
